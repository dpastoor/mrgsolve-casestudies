[
["titration-example.html", "titration example 1 Titration Example", " titration example Devin 1 Titration Example library(mrgsolve) #&gt; Loading required package: methods library(tidyverse, warn.conflicts = FALSE) #&gt; Loading tidyverse: ggplot2 #&gt; Loading tidyverse: tibble #&gt; Loading tidyverse: tidyr #&gt; Loading tidyverse: readr #&gt; Loading tidyverse: purrr #&gt; Loading tidyverse: dplyr #&gt; Conflicts with tidy packages ---------------------------------------------- #&gt; filter(): dplyr, stats #&gt; lag(): dplyr, stats Can interactively develop the cpp functions for the needed functionality and check they work as expected. require(Rcpp) #&gt; Loading required package: Rcpp cppFunction(&quot; bool within(Rcpp::NumericVector x, double val) { int n = x.size(); for (int i = 0; i &lt; n; ++i) { if (x[i] == val) { return true; } } return false; } &quot;) within(c(1, 4, 6), 4) #&gt; [1] TRUE within(c(1, 4, 6), 5) #&gt; [1] FALSE cppFunction(&quot; double titrateDose(NumericVector possibleDoses, double currentDose, bool up){ if (up) { possibleDoses = possibleDoses[possibleDoses &gt;= currentDose]; if (possibleDoses.size() &gt; 1) { return possibleDoses[1]; // 2nd element - one dose higher } // at max dose since only one dose remaining that is &gt;= so keep the same return possibleDoses[0]; } else { possibleDoses = possibleDoses[possibleDoses &lt;= currentDose]; if (possibleDoses.size() &gt; 1) { return possibleDoses[possibleDoses.size()-2]; // 2nd to last element - one dose lower } // at min dose since only one dose remaining that is &lt;= so keep the same return possibleDoses[0]; } }&quot;) titrateDose(1:5, 3, up = TRUE) #&gt; [1] 4 titrateDose(1:5, 3, up = FALSE) #&gt; [1] 2 mod1 &lt;- mread_cache(model = &quot;titration&quot;) #&gt; Compiling titration ... #&gt; done. see(mod1) #&gt; #&gt; Model file: titration.cpp #&gt; $PARAM TVCL = 1.3, TVVC=28, TVKA=0.6, WT=70, START_DOSE = 15 #&gt; #&gt; $SET delta= 1 #&gt; #&gt; $CMT GUT CENT #&gt; #&gt; $PLUGIN Rcpp mrgx #&gt; #&gt; $GLOBAL #&gt; using namespace Rcpp; #&gt; NumericVector possibleDoses; #&gt; NumericVector VISITT; #&gt; #&gt; bool within(Rcpp::NumericVector x, double val) { #&gt; int n = x.size(); #&gt; for (int i = 0; i &lt; n; ++i) { #&gt; if (x[i] == val) { #&gt; return true; #&gt; } #&gt; } #&gt; return false; #&gt; } #&gt; double titrateDose(Rcpp::NumericVector possibleDoses, double currentDose, bool up){ #&gt; if (up) { #&gt; possibleDoses = possibleDoses[possibleDoses &gt;= currentDose]; #&gt; if (possibleDoses.size() &gt; 1) { #&gt; return possibleDoses[1]; // 2nd element - one dose higher #&gt; } #&gt; return possibleDoses[0]; // at max dose since only one dose remaining that is &gt;= so keep the same #&gt; } else { #&gt; possibleDoses = possibleDoses[possibleDoses &lt;= currentDose]; #&gt; if (possibleDoses.size() &gt; 1) { #&gt; return possibleDoses[possibleDoses.size()-2]; // 2nd to last element - one dose lower #&gt; } #&gt; return possibleDoses[0]; // at min dose since only one dose remaining that is &lt;= so keep the same #&gt; } #&gt; } #&gt; #&gt; $PREAMBLE #&gt; possibleDoses = mrgx::get&lt;Rcpp::NumericVector&gt;(&quot;possibleDoses&quot;); #&gt; VISITT = mrgx::get&lt;Rcpp::NumericVector&gt;(&quot;VISITT&quot;); #&gt; #&gt; $MAIN #&gt; if (NEWIND &lt;= 1) { #&gt; // titration dose to start on, right now not explicitly checking #&gt; // if in possible doses, probably should do that #&gt; F_GUT = START_DOSE; #&gt; } #&gt; if (within(VISITT, TIME)) { #&gt; // only adjust dose on EVID == 1 or also during observation time can trigger a dose #&gt; // adjustment if both dosing and observing at the same time and not #&gt; // also checking EVID == 1 #&gt; if (CENT &lt; 10 &amp;&amp; EVID == 1) { #&gt; F_GUT = titrateDose(possibleDoses, F_GUT, true); #&gt; } #&gt; if (CENT &gt; 15 &amp;&amp; EVID == 1) { #&gt; F_GUT = titrateDose(possibleDoses, F_GUT, false); #&gt; } #&gt; } #&gt; double CLi = exp(log(TVCL) + 0.75*log(WT/70) + ETA(1)); #&gt; double VCi = exp(log(TVVC) + ETA(2)); #&gt; double KAi = exp(log(TVKA) + ETA(3)); #&gt; #&gt; $OMEGA name=&quot;IIV&quot; #&gt; 0.1 0 0 #&gt; #&gt; $ODE #&gt; dxdt_GUT = -KAi*GUT; #&gt; dxdt_CENT = KAi*GUT - (CLi/VCi)*CENT; #&gt; #&gt; $TABLE #&gt; double CP = CENT/VCi; #&gt; double ETA1 = ETA(1); #&gt; double ETA2 = ETA(2); #&gt; #&gt; $CAPTURE ETA(1) ETA(2) F_GUT possibleDoses &lt;- c(5, 7.5, 10.0, 12.5, 15, 17.5, 20, 30) # times to check and titrate dose accordingly VISITT &lt;- seq(48,300, 48) out &lt;- mod1 %&gt;% data_set(realize_addl(ev(ID=1:9, amt=1, ii=12, addl=24))) %&gt;% env_update(possibleDoses = possibleDoses, VISITT = VISITT) %&gt;% mrgsim(end=12*24) %&gt;% as_data_frame() out %&gt;% ggplot(aes(time, CENT, group=ID, color = factor(ID)))+ geom_line() + facet_wrap(~ID) + theme_bw() Conclusion - starting dose too high, and algorithm not aggressive enough to titrate down. distinct_doses &lt;- out %&gt;% distinct(ID, F_GUT, .keep_all = TRUE) %&gt;% select(ID, time, F_GUT) head(distinct_doses, n = 10) #&gt; # A tibble: 10 x 3 #&gt; ID time F_GUT #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1 0 15.0 #&gt; 2 1 48 12.5 #&gt; 3 2 0 15.0 #&gt; 4 2 48 12.5 #&gt; 5 2 96 10.0 #&gt; 6 2 144 7.5 #&gt; # ... with 4 more rows # time at which stabilized (final dose first seen) distinct_doses %&gt;% arrange(ID, desc(time)) %&gt;% distinct(ID, .keep_all = T) #&gt; # A tibble: 9 x 3 #&gt; ID time F_GUT #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 1 48 12.5 #&gt; 2 2 144 7.5 #&gt; 3 3 192 5.0 #&gt; 4 4 192 5.0 #&gt; 5 5 144 7.5 #&gt; 6 6 144 7.5 #&gt; # ... with 3 more rows "]
]
